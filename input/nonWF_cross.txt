
initialize() 
{
initializeSLiMModelType("nonWF");
initializeTreeSeq();
initializeSex("A");
initializeMutationType("m1", 0.5, "g", -0.03, 0.2);
m1.convertToSubstitution = T;
initializeGenomicElementType("g1", m1, 1.0);
initializeGenomicElement(g1, 0, 99999);
initializeMutationRate(2.5e-9);
initializeRecombinationRate(4e-8);
}

// cross: only runs in ticks 1-2
1: 2 reproduction() {

// generate an offspring from each individual in each crossed subpop by 
// crossing the two parents, add them to new "p3" subpop	
// practically, create 1 M and 1 F offspring, add to cage "p3"
p3.addCrossed(subpop.individuals[0], subpop.individuals[1], sex=NULL);
}


// this reproduction is used after the cross for remainder of simulation
3:15 reproduction(p3) {

// individuals in p3 can reproduce, offspring go into p4 for aging

if (p3.individualCount > 0)
	p4.addCrossed(subpop.sampleIndividuals(1, sex="F"), subpop.sampleIndividuals(1, sex="M"));
}


1 early() {

// read in processed euro trees
sim.readFromPopulationFile("C://Users/aangu/Documents/Obbard_proj/output/euro_processed.trees");

// remove original euro subpop p1 -- not necessary anymore
p1.removeSubpopulation();

// create empty subpop p3 to be used for offspring of crosses
// p3 is the cage, carrying capacity is the value set for "K"
sim.addSubpop("p3", 0).setValue("K", 20000);

// create empty subpop p4 to be used for non-reproductive juveniles
// set carrying capacity "K" as 25000
sim.addSubpop("p4", 0).setValue("K", 25000);
}


early() {
// density-dependent regulation for p3 according to K
	K = p3.getValue("K");
	p3.fitnessScaling = K / p3.individualCount;
	
// when juveniles are older than age 6, move them into p3 to reproduce	
for (individual in p4.individuals)
	if (individual.age > 6)
		p3.takeMigrants(individual);
}


9 late() {

// kill off original parents from cross
for (individual in p3.individuals)
	if (individual.age == 7)
		sim.killIndividuals(individual);
}


15 late(){
//sim.outputFull();
}